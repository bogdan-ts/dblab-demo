name: Create DBLab Branch Env

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  create-branch-and-clone:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create DBLab branch
        run: |
          echo "Creating DBLab branch for PR #${{ github.event.pull_request.number }}"

          curl -s -X POST \
            -H "Verification-Token: ${{ secrets.DBLAB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "branchName": "pr-${{ github.event.pull_request.number }}",
              "baseBranch": "main"
            }' \
            ${{ secrets.DBLAB_API_URL }}/branch

      - name: Create DBLab clone
        run: |
          echo "Creating DBLab clone for branch pr-${{ github.event.pull_request.number }}"

          curl -s -X POST \
            -H "Verification-Token: ${{ secrets.DBLAB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "id": "pr_${{ github.event.pull_request.number }}_clone",
              "branch": "pr-${{ github.event.pull_request.number }}",
              "db": {
                "username": "${{ secrets.DBLAB_DB_USERNAME }}",
                "password": "${{ secrets.DBLAB_DB_PASSWORD }}"
              }
            }' \
            ${{ secrets.DBLAB_API_URL }}/clone
      - name: Wait for DBLab clone readiness
        run: |
          CLONE_ID="pr_${{ github.event.pull_request.number }}_clone"
          API_URL="${{ secrets.DBLAB_API_URL }}/clone/${CLONE_ID}"

          echo "Waiting for clone $CLONE_ID to become ready..."

          for i in {1..20}; do
            STATUS=$(curl -s -H "Verification-Token: ${{ secrets.DBLAB_TOKEN }}" $API_URL | jq -r '.status.code')

            echo "Status: $STATUS"

            if [ "$STATUS" == "OK" ]; then
              echo "Clone is ready."
              break
            fi

            if [ $i -eq 20 ]; then
              echo "Timeout waiting for clone readiness"
              exit 1
            fi

            sleep 5
          done

      - name: Get DBLab clone port
        id: get-clone-port
        run: |
          CLONE_ID="pr_${{ github.event.pull_request.number }}_clone"
          API_URL="${{ secrets.DBLAB_API_URL }}/clone/${CLONE_ID}"

          CLONE_INFO=$(curl -s -H "Verification-Token: ${{ secrets.DBLAB_TOKEN }}" $API_URL)
          CLONE_PORT=$(echo $CLONE_INFO | jq -r '.db.port')

          echo "Found DBLab clone port: $CLONE_PORT"
          echo "CLONE_PORT=$CLONE_PORT" >> $GITHUB_ENV

      - name: Deploy OpenWebUI for PR on remote server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            PR_ID=pr-${{ github.event.pull_request.number }}
            CLONE_PORT=${{ env.CLONE_PORT }}
            INSTANCE_DIR="/opt/dblab-demo/instances/$PR_ID"
            CONTAINER_NAME="openwebui_${PR_ID}"
            SUBDOMAIN="${PR_ID}.demo-dblab.tsechoev.dev"

            echo "Creating instance directory for $PR_ID"
            mkdir -p $INSTANCE_DIR

            echo "DATABASE_URL=postgresql://${{ secrets.DBLAB_DB_USERNAME }}:${{ secrets.DBLAB_DB_PASSWORD }}@127.0.0.1:${CLONE_PORT}/postgres" > $INSTANCE_DIR/.env
            echo "OLLAMA_BASE_URL=http://localhost:11434" >> $INSTANCE_DIR/.env

            echo "Starting OpenWebUI container: $CONTAINER_NAME"
            docker run -d --name $CONTAINER_NAME --env-file $INSTANCE_DIR/.env --network dblab-net -p 0:8080 ghcr.io/open-webui/open-webui:main

            CONTAINER_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $CONTAINER_NAME)

            echo "Container $CONTAINER_NAME is up at port $CONTAINER_PORT"

            echo "Configuring nginx for $SUBDOMAIN"
            NGINX_CONF="/etc/nginx/sites-enabled/${SUBDOMAIN}.conf"

            sudo bash -c "cat > $NGINX_CONF" <<'EOL'
            server {
                listen 80;
                server_name ${SUBDOMAIN};

                location / {
                    proxy_pass http://127.0.0.1:${CONTAINER_PORT};
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOL

            echo "Reloading nginx..."
            sudo nginx -s reload
